<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mike.depalatis.net</title><link href="http://mike.depalatis.net/" rel="alternate"></link><link href="http://mike.depalatis.net/feeds/michael-v-depalatis.atom.xml" rel="self"></link><id>http://mike.depalatis.net/</id><updated>2015-11-04T00:00:00+01:00</updated><entry><title>Importing one Mercurial repository into another</title><link href="http://mike.depalatis.net/importing-one-mercurial-repository-into-another.html" rel="alternate"></link><updated>2015-11-04T00:00:00+01:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2015-11-04:importing-one-mercurial-repository-into-another.html</id><summary type="html">&lt;p&gt;In the
&lt;a href="http://phys.au.dk/forskning/forskningsomraader/amo/the-ion-trap-group/"&gt;ion trap group&lt;/a&gt;,
we usually use &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; for version controlling software we write
for experimental control, data analysis, and so on. This post outlines
how to import the full history of one repository into another. This
can be useful for cases where it makes sense to move a sub-project
directly into its parent, for example.&lt;/p&gt;
&lt;h2&gt;Convert the soon-to-be child repository&lt;/h2&gt;
&lt;p&gt;With the Mercurial &lt;code&gt;convert&lt;/code&gt; extension, you can rename branches, move,
and filter files. As an example, say we have a repo with only the
&lt;code&gt;default&lt;/code&gt; branch which is to be imported into a super-repository.&lt;/p&gt;
&lt;p&gt;For starters, we will want all our files in the child repo to be in a
subdirectory of the parent repo and not include the child's
&lt;code&gt;.hgignore&lt;/code&gt;. To do this, create a file &lt;code&gt;filemap.txt&lt;/code&gt; with the
following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rename . child
exclude .hgignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line will move all files in the repo's top level into a
directory named &lt;code&gt;child&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, optionally create a &lt;code&gt;branchmap.txt&lt;/code&gt; file for renaming the
&lt;code&gt;default&lt;/code&gt; branch to something else:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;default child-repo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now convert:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg convert --filemap branchmap.txt --branchmap branchmap.txt child/ converted/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pull in the converted repository&lt;/h2&gt;
&lt;p&gt;From the parent repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg pull -f ../converted
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensure the child commits are in the draft phase with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg phase -f --draft -r &amp;lt;first&amp;gt;:&amp;lt;last&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Rebase as appropriate&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg rebase -s &amp;lt;child rev&amp;gt; -d &amp;lt;parent rev&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To keep the child's changed branch name, use the &lt;code&gt;--keepbranches&lt;/code&gt;
option.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://mercurial.selenic.com/wiki/ConvertExtension&lt;/li&gt;
&lt;li&gt;https://mercurial.selenic.com/wiki/Phases&lt;/li&gt;
&lt;li&gt;https://mercurial.selenic.com/wiki/RebaseExtension&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/3214717/how-can-i-import-a-mercurial-repo-including-history-into-another-mercurial-rep&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/3338672/mercurial-convert-clones-to-branches&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mercurial"></category></entry><entry><title>Running (possibly) blocking code like a Tornado coroutine</title><link href="http://mike.depalatis.net/running-possibly-blocking-code-like-a-tornado-coroutine.html" rel="alternate"></link><updated>2015-08-03T19:54:00+02:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2015-08-03:running-possibly-blocking-code-like-a-tornado-coroutine.html</id><summary type="html">&lt;p&gt;One of the main benefits of using the &lt;a class="reference external" href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt; web server is that it
is (normally) a single-threaded, asynchronous framework that can rely
on coroutines for concurrency. Many drivers already exist to provide a
client library utilizing the Tornado event loop and coroutines (e.g.,
the &lt;a class="reference external" href="https://github.com/mongodb/motor/"&gt;Motor&lt;/a&gt; &lt;a class="reference external" href="https://www.mongodb.org/"&gt;MongoDB&lt;/a&gt; driver).&lt;/p&gt;
&lt;p&gt;To write your own coroutine-friendly code for Tornado, there are a few
different options available, all requiring that you somehow wrap
blocking calls within a Future so as to allow the event loop to
continue executing. Here, I demonstrate one recipe to do just this by
utilizing &lt;tt class="docutils literal"&gt;Executor&lt;/tt&gt; objects from the &lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt;
module. We start with the imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.concurrent&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run_on_executor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IOLoop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;&lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt; is standard in Python &amp;gt;= 3.2 and is
installable via &lt;tt class="docutils literal"&gt;pip install futures&lt;/tt&gt; for older versions.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We will be using the &lt;tt class="docutils literal"&gt;run_on_executor&lt;/tt&gt; decorator which requires that
the class whose methods we decorate have some type of &lt;tt class="docutils literal"&gt;Executor&lt;/tt&gt;
attribute (the default is to use the &lt;tt class="docutils literal"&gt;executor&lt;/tt&gt; attribute, but a
different &lt;tt class="docutils literal"&gt;Executor&lt;/tt&gt; can be used with a keyword argument passsed to
the decorator). We'll create a class to run our asynchronous tasks and
give it a &lt;tt class="docutils literal"&gt;ThreadPoolExecutor&lt;/tt&gt; for executing tasks. In this
contrived example, our long running task just sleeps for a random
amont of time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@run_on_executor&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_running_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, from within a coroutine, we can let the tasks run as if they were
normal coroutines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# this is necessary if running as an ipynb!&lt;/span&gt;
&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;long_running_task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_other_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in the main coroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;do_other_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which produces output like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
3
0.6012166386789509
1
0.9235652108721132
0
0.42316507955015026
3
0.9766563871068523
1
0.21032495467534018
2
0.15572313672917715
0
0.8767039780374377
3
0.6542727048597389
2
0.3623342196737247
0
0.30042493880819876
&lt;/pre&gt;
&lt;p&gt;Using this general pattern, it is rather easy to adapt blocking calls
to Tornado's coroutines. Note that the example code can be found
&lt;a class="reference external" href="https://gist.github.com/mivade/5966f1b7a995a50ecc55"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="tornado"></category><category term="async"></category></entry><entry><title>Background tasks with Tornado</title><link href="http://mike.depalatis.net/background-tasks-with-tornado.html" rel="alternate"></link><updated>2015-02-28T14:32:00+01:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2015-02-28:background-tasks-with-tornado.html</id><summary type="html">&lt;p&gt;I have been using &lt;a href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt; lately for distributed control of
devices in the lab where an asynchronous framework is advantageous. In
particular, we have a &lt;a href="http://www.highfinesse.com/"&gt;HighFinesse&lt;/a&gt; &lt;a href="http://www.highfinesse.com/en/wavelengthmeter/"&gt;wavelength meter&lt;/a&gt;
which we use to monitor and stabilize several lasers (up to 14 at a
time). Previously, a custom server for controlling this wavemeter was
written using &lt;a href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt;, but that has proven difficult to upgrade,
distribute, and maintain.&lt;/p&gt;
&lt;p&gt;One thing that is common for such a control scenario is that data
needs to be refreshed continuously while still allowing incoming
connections from clients and appropriately executing remote procedure
calls. One method would be to periodically interrupt the Tornado IO
loop to refresh data (and in fact, Tornado has a class to make this
easy for you in &lt;code&gt;tornado.ioloop.PeriodicCallback&lt;/code&gt;). This can be fine
if the data refreshing does not take too much time, but all other
operations will be blocked until the callback is finished, which can
be a problem if the refreshing operation is slow. Another option is to
have an additional thread separate from the Tornado IO loop that
handles refreshing data. This certainly works, but adds the complexity
of needing to use thread-safe communications to stop the thread when
the main application is shut down or when other tasks depend on the
successful completion of the refresh.&lt;/p&gt;
&lt;p&gt;Luckily, Tornado also includes a decorator,
&lt;code&gt;tornado.concurrent.run_on_executor&lt;/code&gt;, to run things in the background
for you using Python's &lt;code&gt;concurrent.futures&lt;/code&gt; module (which is standard
starting in Python 3.3 and backported for other versions). Then
instead of writing the refresh function as a loop that runs in the
background, you instead have its final call be to add itself back as a
callback on the IO loop. This makes shutdown trivial since only the IO
loop needs to be stopped when the program is closed. A refresh
function could thus look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@tornado.concurrent.run_on_executor&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;do_something_that_takes_a_while&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now after &lt;code&gt;refresh&lt;/code&gt; is called once, it will continuously run until the
IO loop is stopped.&lt;/p&gt;
&lt;p&gt;For a more complete example, I have written a small &lt;a href="https://gist.github.com/mivade/421c427db75c8c5fa1d1"&gt;demo&lt;/a&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="tornado"></category><category term="lab"></category></entry><entry><title>Flask and server-sent events</title><link href="http://mike.depalatis.net/flask-and-server-sent-events.html" rel="alternate"></link><updated>2015-02-14T13:34:00+01:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2015-02-14:flask-and-server-sent-events.html</id><summary type="html">&lt;p&gt;I recently discovered the existence of the HTML5
&lt;a href="https://en.wikipedia.org/wiki/Server-sent_events"&gt;server-sent events&lt;/a&gt; standard. Although it lacks the
bidirectional communications of a websocket, SSE is perfect for the
publish-subscribe networking pattern. This pattern just so happens to
fit in conveniently with writing software to remotely monitor hardware
that many people might want to check in on at the same time.&lt;/p&gt;
&lt;p&gt;In order to try SSE out within a &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; framework, I put together a
simple &lt;a href="https://github.com/mivade/flask-sse-demo"&gt;demo app&lt;/a&gt; using &lt;a href="http://gevent.org/"&gt;gevent&lt;/a&gt;. The core of the demo on the
Python side looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;event&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;data: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/stream/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/event-stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be run either using gevent's WSGI server or &lt;a href="http://gunicorn.org/"&gt;gunicorn&lt;/a&gt;
using gevent workers.&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category><category term="javascript"></category><category term="sse"></category><category term="gevent"></category></entry><entry><title>Using websockets with Flask via Tornado</title><link href="http://mike.depalatis.net/using-websockets-with-flask-via-tornado.html" rel="alternate"></link><updated>2014-12-15T19:44:00+01:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2014-12-15:using-websockets-with-flask-via-tornado.html</id><summary type="html">&lt;p&gt;I've been working on some projects for the lab that involve remotely
controlling hardware to perform various tasks. Since the hardware in
question is shared between different experiments, some sort of
asynchronous solution is needed, and a web-based client coupled with
&lt;a href="https://en.wikipedia.org/wiki/WebSocket"&gt;websockets&lt;/a&gt; seemed to be the best bet (this also leaves the option
open in the future to write a standalone client that is not
browser-based if desired).&lt;/p&gt;
&lt;p&gt;There is no shortage of web frameworks for Python. Some of the more
popular ones are &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a href="http://tornadoweb.org/"&gt;Tornado&lt;/a&gt;, and
&lt;a href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;. Of these, I greatly prefer Flask for a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Very thorough and easy to read documentation, including "snippets"
  with helpful tips and a very helpful community.&lt;/li&gt;
&lt;li&gt;Extreme ease of use for both small and large projects.&lt;/li&gt;
&lt;li&gt;Great use of decorators to further ease development.&lt;/li&gt;
&lt;li&gt;A large number of extensions to build up a complex project without
  requiring overhead for simple projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not to say that the other options are bad, but having looked
at all of them, Flask suits me best. The one problem: only Tornado
directly supports websockets since it is both an HTTP server and a web
framework in one, whereas the others utilize &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;WSGI&lt;/a&gt; for deployment.&lt;/p&gt;
&lt;p&gt;Luckily, it is possible to leverage both the excellent asynchronous
features of Tornado and the power and ease of use of Flask through
Tornado's ability to serve WSGI apps with
&lt;code&gt;tornado.wsgi.WSGIContainer&lt;/code&gt;. The Flask documentation shows a very
simple
&lt;a href="http://flask.pocoo.org/docs/0.10/deploying/wsgi-standalone/#tornado"&gt;example&lt;/a&gt;
on how to do just that.&lt;/p&gt;
&lt;p&gt;Integrating websockets into a Flask app is now pretty easy. Here's an
example on the server side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIContainer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FallbackHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.websocket&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebSocketHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IOLoop&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebSocketHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Socket opened.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Received: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Received message: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Socket closed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flasknado&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;/websocket/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;.*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FallbackHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The client-side Javascript is simple as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ws://&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:8080/websocket/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input#message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input#message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full demo example can be found
&lt;a href="https://github.com/mivade/flasknado"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Additional notes&lt;/h2&gt;
&lt;p&gt;There already exist at least two extensions for Flask to use
websockets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/flask-sockets"&gt;Flask-Sockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/miguelgrinberg/Flask-SocketIO"&gt;Flask-SocketIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, both of these are based on
&lt;a href="http://gevent.org/"&gt;gevent&lt;/a&gt;. While gevent is nice, it still has
limited Python 3 support and does not work on Windows (sadly, a
requirement for some hardware drivers).&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category><category term="tornado"></category><category term="javascript"></category><category term="websockets"></category></entry><entry><title>ssh-agent for sudo authentication with a passwordless account</title><link href="http://mike.depalatis.net/ssh-agent-for-sudo-authentication-with-a-passwordless-account.html" rel="alternate"></link><updated>2014-12-07T15:25:00+01:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2014-12-07:ssh-agent-for-sudo-authentication-with-a-passwordless-account.html</id><summary type="html">&lt;p&gt;For best security on a public system, it is generally best to disable
password-based logins with ssh and instead require authorized
keys. However, this complicates things if you want to use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt;
with a regular user account, since by default it uses the standard
system password to verify the user is authorized to run commands as
root.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="http://pamsshagentauth.sourceforge.net/"&gt;pam_ssh_agent_auth&lt;/a&gt;. This module allows using regular ssh keys
and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-agent&lt;/span&gt;&lt;/tt&gt; to verify the user has the proper authorization to
use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You'll want to start by ensuring you have generated ssh keys for your
user and are using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-agent&lt;/span&gt;&lt;/tt&gt;. To generate the keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;$ ssh-keygen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then just accept the defaults, but make sure to set a password for
your new key pair. Add the public key to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.ssh/authorized_keys&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Since the PAM module isn't in Debian, first grab the build
dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;# apt-get install build-essential checkinstall libssl-dev libpam0g-dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I had never heard about &lt;tt class="docutils literal"&gt;checkinstall&lt;/tt&gt; until reading the
references to figure out how to do this. Although I rarely
have the need to install things from source, it seems like a
very nice utility!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next, grab the source and build:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;# wget http://downloads.sourceforge.net/project/pamsshagentauth/pam_ssh_agent_auth/v0.10.2/pam_ssh_agent_auth-0.10.2.tar.bz2&lt;/span&gt;
&lt;span class="go"&gt;# tar -xvjf pam_ssh_agent_auth-0.10.2.tar.bz2&lt;/span&gt;
&lt;span class="go"&gt;# cd pam_ssh_agent_auth-0.10.2&lt;/span&gt;
&lt;span class="go"&gt;# ./configure --libexecdir=/lib/security --with-mantype=man&lt;/span&gt;
&lt;span class="go"&gt;# make&lt;/span&gt;
&lt;span class="go"&gt;# checkinstall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The &lt;tt class="docutils literal"&gt;libexecdir&lt;/tt&gt; option to the &lt;tt class="docutils literal"&gt;configure&lt;/tt&gt; script is set
since apparently Debian keeps PAM modules in a different
place than &lt;tt class="docutils literal"&gt;pam_ssh_agent_auth&lt;/tt&gt; expects by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;The preceding commands are run as root simply because as
I was setting this up, the regular user had no password
set and so could not use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt;. You may wish to only
install as root!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Edit the file &lt;tt class="docutils literal"&gt;/etc/pam.d/sudo&lt;/tt&gt; and add the following line &lt;em&gt;before&lt;/em&gt;
any other &lt;tt class="docutils literal"&gt;auth&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&amp;#64;include&lt;/tt&gt; commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;auth sufficient pam_ssh_agent_auth.so file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;~/.ssh/authorized_keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;tt class="docutils literal"&gt;visudo&lt;/tt&gt; to edit &lt;tt class="docutils literal"&gt;/etc/sudoers&lt;/tt&gt; and add this line before any
other &lt;tt class="docutils literal"&gt;Defaults&lt;/tt&gt; lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;Defaults env_keep +&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;SSH_AUTH_SOCK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="invoking-sudo"&gt;
&lt;h2&gt;Invoking &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;To actually be able to use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; now, run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-agent&lt;/span&gt;&lt;/tt&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;$ eval `ssh-agent`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and add the key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;$ ssh-add -t 600&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will set the keys to timeout in 10 minutes (600 seconds).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;A more elegant way of adding keys and running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-agent&lt;/span&gt;&lt;/tt&gt;, including
checking to see if a process is already running!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://unix.stackexchange.com/a/158452"&gt;How to allow authentication with sudo using an alternate password?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.evans.io/posts/ssh-agent-for-sudo-authentication/"&gt;Using SSH agent for sudo authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mah.everybody.org/docs/ssh"&gt;Using ssh-agent with ssh&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="debian"></category><category term="ssh"></category><category term="sudo"></category><category term="linux"></category></entry><entry><title>Raspberry Pi as a USB to Ethernet Gateway</title><link href="http://mike.depalatis.net/raspberry-pi-as-a-usb-to-ethernet-gateway.html" rel="alternate"></link><updated>2014-06-10T10:59:00+02:00</updated><author><name>Michael V. DePalatis</name></author><id>tag:mike.depalatis.net,2014-03-08:raspberry-pi-as-a-usb-to-ethernet-gateway.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the most convenient ways of communicating with experimental
devices (such as oscilloscopes, frequency generators, pulse
generators, etc.) is via ethernet. The advantages of this over other
forms of communication such as GPIB, RS-232 serial ports, etc., is
that, provided the device receives a fixed IP address or some sort of
dynamic DNS service is used, it doesn't matter where it is located and
specialty cabling can be kept to a minimum. Luckily, most of these
devices, even if they are not equipped with ethernet capability, can
be made to work over ethernet with some sort of device server (e.g.,
there are device servers such as those made by &lt;a href="http://www.moxa.com/product/Serial_Device_Servers.htm"&gt;Moxa&lt;/a&gt; which can
"convert" RS-232 serial port communications to ethernet).&lt;/p&gt;
&lt;p&gt;A lot of modern devices come equipped with a USB port on the back
which complies with the &lt;a href="http://www.usb.org/developers/devclass_docs"&gt;USBTMC&lt;/a&gt; (USB test and measurement class)
specifications. Even fairly inexpensive equipment which lacks an
ethernet port are likely to have a USB port for USBTMC communications
(e.g., the popular and inexpensive &lt;a href="http://www.rigolna.com/products/digital-oscilloscopes/ds1000d/"&gt;Rigol DS1000D series&lt;/a&gt;
digital oscilloscopes). There exists a USBTMC Linux
&lt;a href="http://www.home.agilent.com/upload/cmc_upload/All/usbtmc.html"&gt;kernel module&lt;/a&gt; which allows for communication with
USBTMC devices via /dev/usbtmcNNN device files. This module, coupled
with the versatile &lt;code&gt;socat&lt;/code&gt; command, can thus allow for transparent
communications over ethernet with a USBTMC device as if it were
connected via ethernet itself. The rest of this note describes the
process for using a Raspberry Pi as a USBTMC to ethernet adapter.&lt;/p&gt;
&lt;h2&gt;Compiling the RPi kernel&lt;/h2&gt;
&lt;p&gt;The RPi's default kernel does not include USBTMC support as a module
or built into the kernel. This requires building from scratch, the
full details of which can be found &lt;a href="http://elinux.org/RPi_Kernel_Compilation"&gt;here&lt;/a&gt;. The basic idea
is to grab the RPi kernel source on a fast computer and cross compile
it with the USBTMC kernel module&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; (or build into the kernel if
you prefer).&lt;/p&gt;
&lt;p&gt;There are a few caveats and pitfalls, so the following provides the
step-by-step approach that worked for me. To get started on a 64-bit
Linux machine, make sure you have the 32-bit libraries
installed. &lt;a href="https://groups.google.com/d/msg/comp.sys.raspberry-pi/ONzkoIV9ab8/E4wejOI51WwJ"&gt;On Debian and derivatives&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo  dpkg  --add-architecture  i386 # enable multi-arch
sudo  apt-get  update
sudo  apt-get  install  ia32-libs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once this is done, the following steps will get things working:&lt;/p&gt;
&lt;h3&gt;Get the RPi kernel source:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git clone --depth 1 git://github.com/raspberrypi/linux.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get the compiler for cross-compiling:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git clone git://github.com/raspberrypi/tools.git&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile the kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the kernel source directory, do:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make mrproper&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, copy the default configuration file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp arch/arm/configs/bcmrpi_defconfig .config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Select the appropriate compiler to use by defining an environment
variable that points to the right place (TODO: put the right thing
here): &lt;/p&gt;
&lt;p&gt;&lt;code&gt;export CCPREFIX=/path/to/your/compiler/binary/prefix-of-binary-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pre-configure everything and &lt;a href="http://serverfault.com/a/116317"&gt;accept the defaults&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yes "" | make oldconfig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can enable building of the usbtmc kernel module. Run &lt;code&gt;make
menuconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;Device Drivers &amp;gt; USB support &amp;gt; USB Test and Measurement
Class support&lt;/code&gt; and make sure it is marked &lt;code&gt;M&lt;/code&gt; to build a module. Save
the configuration file, then exit. Now build the kernel:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make ARCH=arm CROSS_COMPILE=${CCPREFIX} -jN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;N&lt;/code&gt; is the number of CPU cores + 1 (e.g., if there are 4 cores,
N = 5). This step will take several minutes on a reasonably fast
computer. Next build the modules:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make ARCH=arm CROSS_COMPILE=${CCPREFIX} modules&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Transferring the kernel:&lt;/h3&gt;
&lt;p&gt;First copy to the RPi: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp arch/arm/boot/Image pi@yourpi:kernel_someuniqueid.img&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then on the RPi, copy this over to &lt;code&gt;/boot&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo cp kernel_someuniqueid.img /boot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Edit the bootloader configuration file to use the new kernel by making
sure the following line appears:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kernel=kernel_someuniqueid.img&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and comment out any other &lt;code&gt;kernel=...&lt;/code&gt; lines.&lt;/p&gt;
&lt;h3&gt;Transferring the kernel modules:&lt;/h3&gt;
&lt;p&gt;On the build machine, make a temporary directory to install modules
to: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/modules
export MODULES_TEMP=~/modules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the build directory:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make ARCH=arm CROSS_COMPILE=${CCPREFIX}
INSTALL_MOD_PATH=${MODULES_TEMP} modules_install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now in the temporary directory, there should be a &lt;code&gt;lib&lt;/code&gt; directory. We
don't need the source/headers, so remove them (otherwise you might run
out of space on the RPi SD card!). Transfer these over to the RPi:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp -r lib pi@yourpi:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;On the RPi, copy and overwrite the contents of &lt;code&gt;lib&lt;/code&gt; into &lt;code&gt;/lib&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo cp -f lib/* /lib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Only do this step while running a different version of the kernel
 than what you compiled!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Reboot.&lt;/h3&gt;
&lt;h3&gt;Load the module:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo modprobe usbtmc&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Connect the USB device.&lt;/h3&gt;
&lt;p&gt;There should now be a device named &lt;code&gt;/dev/usbtmc0&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Talking to the device&lt;/h2&gt;
&lt;p&gt;A Python script for piping data to and from a USBTMC device can be
found &lt;a href="https://gist.github.com/mivade/112ef2087238662441ab"&gt;here&lt;/a&gt;. It
should be run through &lt;code&gt;socat&lt;/code&gt; which does the more difficult work of
properly transferring packets. The &lt;code&gt;socat&lt;/code&gt; command I use is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;socat tcp-listen:5025,fork,reuseaddr,crnl,tcpwrap=script\
    EXEC:&amp;quot;python usbtmc_pipe.py&amp;quot;,su-d=pi,pty,echo=0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other notes&lt;/h2&gt;
&lt;p&gt;It turns out that it is not necessary to use the kernel module to talk
to USBTMC devices. A &lt;a href="http://alexforencich.com/wiki/en/python-usbtmc/start"&gt;pure Python&lt;/a&gt; implementation of using the
USBTMC protocol also exists. This has the advantage of not requiring a
custom kernel for the RPi, but it adds the slight complexity of
needing to specify vendor and product IDs.&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In the &lt;code&gt;make menuconfig&lt;/code&gt; configuration menus, the option can be
  found under &lt;code&gt;Device Drivers &amp;gt; USB support &amp;gt; USB Test and
  Measurement Class support&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="raspberrypi"></category><category term="python"></category></entry></feed>